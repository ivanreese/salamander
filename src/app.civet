export {} // Convince TypeScript that this is a module

const elm = document.querySelector("canvas") ?? throw "No Canvas"
const context = elm.getContext("webgpu") ?? throw "No GPU context"
const adapter = await navigator.gpu.requestAdapter() ?? throw "No GPU adapter"
const device = await adapter.requestDevice()
const format = navigator.gpu.getPreferredCanvasFormat()
context.configure { device, format }

const bindGroupLayoutEntries: Array<GPUBindGroupLayoutEntry> = []
const bindGroupEntries: Array<GPUBindGroupEntry> = []

const bindingTypes: Record<GPUBufferBindingType, GPUShaderStageFlags> =
  uniform: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST
  storage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST
  "read-only-storage": GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST

const textureBindingTypes: Record<string, GPUShaderStageFlags> =
  texture: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST

const visC = GPUShaderStage.COMPUTE
const visV = GPUShaderStage.VERTEX
const visF = GPUShaderStage.FRAGMENT

type TypedArray = Uint8Array | Uint32Array | Float32Array
type Size = width: number, height: number
type BoundBuffer = binding: GPUIndex32, buffer: GPUBuffer, values: TypedArray
type BoundTexture = binding: GPUIndex32, texture: GPUTexture, values: TypedArray, size: Size
type BoundSampler = binding: GPUIndex32, sampler: GPUSampler

function bindBuffer(label: string, binding: number, values: TypedArray, type: GPUBufferBindingType = "uniform", visibility = visC | visF): BoundBuffer
  const buffer = device.createBuffer { label, size: values.byteLength, usage: bindingTypes[type] }
  const resource: GPUBindingResource = { label, buffer } // the resource we want to expose to the shader variable that's bound to this location
  bindGroupLayoutEntries[binding] = { binding, visibility, buffer: { type } }
  bindGroupEntries[binding] = { binding, resource }
  rebindBuffer { buffer, binding, values }

function bindTexture(label: string, binding: number, values: TypedArray, size: Size, type = "texture", visibility = visC | visF): BoundTexture
  const texture = device.createTexture { label, size, format: 'rgba8unorm', usage: textureBindingTypes[type] }
  bindGroupLayoutEntries[binding] = { binding, visibility, texture: {} }
  bindGroupEntries[binding] = { binding, resource: texture.createView() }
  rebindTexture { texture, binding, values, size }

function bindSampler(label: string, binding: number, visibility = visC | visF): BoundSampler
  const sampler = device.createSampler { label, magFilter: "linear" }
  bindGroupLayoutEntries[binding] = { binding, visibility, sampler: {} }
  bindGroupEntries[binding] = { binding, resource: sampler }
  { binding, sampler }

function rebindBuffer(bound: BoundBuffer, vals: TypedArray = bound.values)
  device.queue.writeBuffer bound.buffer, 0, (bound.values = vals)
  bound

function rebindTexture(bound: BoundTexture, vals: TypedArray = bound.values)
  device.queue.writeTexture { texture: bound.texture }, vals, { bytesPerRow: bound.size.width * 4 }, bound.size
  bound



// MAKE UMS /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const scale = 8
const speed = 32
const dpi = window.devicePixelRatio
elm.width = dpi * window.innerWidth / scale
elm.height = dpi * window.innerHeight / scale
const WORKGROUP_SIZE = 8 // Must agree with @workgroup_size() in compute shader
const nWorkgroups =
  x: Math.ceil(elm.width / WORKGROUP_SIZE) * speed
  y: Math.ceil(elm.height / WORKGROUP_SIZE)

const sampler = bindSampler "sampler", 0
const storage = bindTexture "tex", 1, Float32Array.from({length: 20 * 20 * 4}, () => Math.random()), {width: 20, height: 20}
const state = bindBuffer "state", 2, new Float32Array(elm.width * elm.height * 4), "storage"
const clock = bindBuffer "clock", 3, new Float32Array [0, 0] // time, dt
const canvas = bindBuffer "canvas", 4, new Uint32Array [elm.width, elm.height] // width, height
const pointer = bindBuffer "pointer", 5, new Float32Array 6 // x, y, old x, old y, down, padding



// We use a bind group to put together a collection of resources to make available to a shader all at once.
// Bind groups can include various buffers, textures, samplers, etc.
const bindGroupLayout = device.createBindGroupLayout label: "BGL", entries: bindGroupLayoutEntries
const bindGroup = device.createBindGroup label: "BG", layout: bindGroupLayout, entries: bindGroupEntries
const pipelineLayout = device.createPipelineLayout label: "PL", bindGroupLayouts: [bindGroupLayout]

const loadShader = (p:string)-> (await fetch(p).then .text()).replace "$FORMAT", `${format}`

const renderPipeline = device.createRenderPipeline
  label: "render pipe"
  layout: pipelineLayout
  vertex:
    module: device.createShaderModule label: "vert", code: await loadShader "./vertex.wgsl"
    entryPoint: "vertex"
  fragment:
    module: device.createShaderModule label: "frag", code: await loadShader "./fragment.wgsl"
    entryPoint: "fragment"
    targets: [{ format }]
  primitive: topology: "triangle-strip"

const computePipeline = device.createComputePipeline
  label: "compute pipe"
  layout: pipelineLayout
  compute:
    module: device.createShaderModule label: "comp", code: await loadShader "./compute.wgsl"
    entryPoint: "compute"

function render
  const commandEncoder = device.createCommandEncoder()

  const renderPassDescriptor: GPURenderPassDescriptor =
    colorAttachments: [ // Each attachment is a texture we'll use in this render pass. We just need the one.
      loadOp: "clear" // clear the texture when the pass starts
      storeOp: "store" // save the results of any draw calls into this texture
      // Specify the texture we're going to render into in this render pass
      // The "view" of the texture lets us configure what part of the texture to use â€” default is fine
      view: context.getCurrentTexture().createView()
    ]

  const computePass = commandEncoder.beginComputePass()
  computePass.setPipeline computePipeline
  computePass.setBindGroup 0, bindGroup
  computePass.dispatchWorkgroups nWorkgroups.x, nWorkgroups.y
  computePass.end()

  // Init the render pass
  const renderPass = commandEncoder.beginRenderPass renderPassDescriptor
  renderPass.setPipeline renderPipeline
  // renderPass.setVertexBuffer 0, vertexBuffer
  renderPass.setBindGroup 0, bindGroup
  renderPass.draw 3
  renderPass.end()
  device.queue.submit [commandEncoder.finish()]

  // Now that we're done rendering, our current mouse position is copied over to the old pos
  pointer.values[2] = pointer.values[0]
  pointer.values[3] = pointer.values[1]


// ENGINE /////////////////////////////////////////////////////////////////////////////////////////

let wallTime = 0
let time = 0
let dt = 0

function doTick(ms:number)
  const wallThen = wallTime
  wallTime = ms / 1000
  dt = Math.min wallTime - wallThen, 0.1
  time += dt
  rebindBuffer clock, new Float32Array [time, dt]
  rebindBuffer pointer
  render()
  window.requestAnimationFrame doTick

window.requestAnimationFrame (ms)->
  wallTime = ms / 1000
  window.requestAnimationFrame doTick

addEventListener "pointerdown", ()-> pointer.values[4] = 1
addEventListener "pointerup", ()-> pointer.values[4] = 0
addEventListener "pointermove", (event)->
  pointer.values[0] = event.clientX * window.devicePixelRatio / scale
  pointer.values[1] = event.clientY * window.devicePixelRatio / scale
